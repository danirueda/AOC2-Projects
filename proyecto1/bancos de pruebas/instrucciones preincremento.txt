formato aritméticas: 
op	rs	rt	rd	shamt	funct
000001	00001	00010  	00011  	00000	000000  ADD R3, R1, R2

formato lw, sw, beq:
op	rs	rt		inm
000010 	00000	00001 	0000000000000000 		LW  R1, 0(R0)  dir 0

El valor inicial de los registros es 0 (partimos de un reset)
El código está pensado para funcionar en un procesador con saltos 1-retardados que no detecta los riesgos de datos

En las instrucciones de salto, para saber que inmediato debemos introducir en función del PC y de la dirección de salto
viene dado por la siguiente expresión: Ext(Inm) = (dirSalto-PC-4)/4


Vamos a realizar un programa que mueva una tabla de una zona de memoria a otra usando instrucciones pre-incremento.
Tenemos la siguiente información en memoria de datos.

direcciones ->0,4,8,12,16,20
datos		->5(tamaño de la tabla),4,5,9,2,A 			(DEBEN INTRODUCIRSE EN LA MEMORIA DE DATOS)

Código
-----------------------
dir 0 	LW R5, 0(R0)				//R0=tamaño tabla
dir 1 	LW_pre R30, 20(R2)			//Basura en R30 pero nos posicionamos al final de la tabla para empezar a mover
									//(Es como hacer un mov a R2)
dir 2 	LW_pre R29, 1(R4)			//Basura en R29 pero metemos un 1 en R4
dir 3 	LW_pre R0, 4(R1)			//Cargamos el primer dato y movemos cursor
dir 4 	ADD R3,R3,R4				//Incrementamos el contador
dir 5 	NOP
dir 6 	SW_pre R0, 4(R2)			//Movemos el dato a otro lugar de memoria y movemos cursor
dir 7 	NOP 
dir 8	BEQ R3, R5, dir12			//Si hemos recorrido toda la tabla, fin del programa
dir 9	NOP
dir 10 	BEQ R0, R0, dir3			//Saltamos al inicio del bucle
dir 11 	NOP
dir 12 	BEQ R0, R0, dir12			//Bucle infinito de finalización
dir 13 	NOP


Separado por campos
----------------------------------------


000010 	00000	00101 	0000000000000000 				LW R5, 0(R0)	
000110 	00010	11110 	0000000000010100 				LW_pre R30, 20(R2)
000110 	00100	11101 	0000000000000001 				LW_pre R29, 1(R4)
000110 	00001	00000 	0000000000000100 				LW_pre R0, 4(R1)
000001	00011	00100  	00011  	00000	000000 			ADD R3,R3,R4
000000 	00000	00000 	0000000000000000 				NOP
000111 	00010	00000 	0000000000000100 				SW_pre R0, 4(R2)
000000 	00000	00000 	0000000000000000 				NOP
000100 	00101	00011 	0000000000000011 				BEQ R3, R5, dir12
000000 	00000 	00000 	0000000000000000 				NOP
000100 	00000	00000 	1111111111111000 				BEQ R0, R0, dir3
000000 	00000 	00000 	0000000000000000 				NOP
000100 	00000	00000 	1111111111111111 				BEQ R0, R0, dir12
000000 	00000 	00000 	0000000000000000 				NOP

En hexadecimal
----------------------------------------

				Bin 					  Hexa

00001000000001010000000000000000		08050000		LW R5, 0(R0)				dir 0
00011000010111100000000000010100		185E0014		LW_pre R30, 20(R2)			dir 1
00011000100111010000000000000001		189D0001		LW_pre R29, 1(R4)			dir 2
00011000001000000000000000000100		18200004		LW_pre R0, 4(R1)			dir 3
00000100011001000001100000000000		04641800		ADD R3,R3,R4				dir 4
00000000000000000000000000000000		00000000 		NOP							dir 5
00011100010000000000000000000100		1C400004 		SW_pre R0, 4(R2)			dir 6
00000000000000000000000000000000		00000000 		NOP							dir 7
00010000101000110000000000000011		10A30003 		BEQ R3, R5, dir12			dir 8
00000000000000000000000000000000 		00000000 		NOP							dir 9
00010000000000001111111111111000		1000FFF8 		BEQ R0, R0, dir3			dir 10
00000000000000000000000000000000 		00000000 		NOP							dir 11
00010000000000001111111111111111		1000FFFF 		BEQ R0, R0, dir12			dir 12
00000000000000000000000000000000 		00000000 		NOP							dir 13